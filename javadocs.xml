<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     Apr 17, 2013 4:32:08 AM                                                        

     GWSOmega    
     javadocs gen build script
     
     Look folks I run this inside an IDE, do not try this 
     outside of an IDE..please
     
     
     Background:
     
     -The android ant build scripts and ant tasks put project libs
      in the libs folder.
     -ivy when it retrieves artefacts puts them first in a local
      cache at user.home/.ivy2 and than copies them over to a 
      project lib folder according to an artefact pattern that is
      specificied in the retrieve task.
      
      Because we use multiple projects as sub modules for android 
      application development we need to direct ivy to retrieve and 
      place a copy of the artefact in the project lib folder.
      
      Our setup is that we prepared a local ivy repo in user.home/.ivys/local
      thus we need no ivysettings.xml file setup in our project.
      
                   
     fredgrott                                                                
     ====================================================================== -->
<project name="GWSOmega" default="default"
	xmlns:oja="jwaresoftware.antxtras" 
	xmlns:emit="jwaresoftware.log4ant"
	xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
            javadocs gen build script
    </description>
	<!-- retrieve system environment properties -->
	<property environment="env"/>
	<!-- set default datetime properties -->
	<tstamp/>
	<!-- platform specific path separator-->
	<property name="ps" value="${path.separator}"/>
	<!-- load project.properties file-->
	<property file="project.properties"/>
	<!-- load local.properties file -->
	<property file="local.properties"/>
	<property name="build.config.dir" location="${basedir}/build.config"/>
	<property name="ant.task.jars.dir" location="${build.config.dir}/ant"/>
	<property name="ant,task.bootstrap.jar.dir" location="${build.config.dir}/ant.bootstrap"/>
	<property name="doclets.jars.dir" location="${build.config.dir}/doclets/doclets.jars"/>
	<property name="doclava.config.dir" location="${build.config.dir}/doclets/doclava.config"/>
	<property name="yuml.config.dir" location="${build.config.dir}/doclets/yuml.config"/>
	<property name="yuml.resources" location="${yuml.config.dir}/resources"/>
	<mkdir dir="${basedir}/docs/getit"/>
	<mkdir dir="${basedir}/lib"/>
	<mkdir dir="${basedir}/bin/tempydoc"/>
	<property name="temp.ydoc.out.dir" location="${basedir}/bin/tempydoc"/>
	<property name="doclava.templatedir" location="${doclava.config.dir}/assets/templates"/>
	<property name="doclava.htmldir" location="${doclava.config.dir}/htmldir"/>
	<property name="android.platform.jar" location="${sdk.dir}/platforms/${target}/android.jar"/>
	
	<path id="apache.ivy.path">
         <fileset dir="${ant,task.bootstrap.jar.dir}" >
            <include name="ivy-2.3.0.jar"/>
         </fileset>
    </path>
	<!-- Location of Log4Ant antlib and thirdparty files,
	         note in log4ant example they missuse dirname poiting to 
	         dir with file which will not produce the expected result -->
	      <path id="ourjware.path">
	            <fileset dir="${build.config.dir}/ant.bootstrap/dep">
	                <include name="*/lib/*.jar"/>
	            </fileset>
	        <fileset dir="${build.config.dir}/ant.bootstrap">
	             <include name="jw-log4ant.jar"/>
	            <include name="logback-access-1.0.9.jar"/>
	            <include name="logback-core-1.0.9.jar"/>
	            <include name="logback-classic-1.0.9.jar"/>
	         </fileset>
	    <pathelement 
	      location="${build.config.dir}/ant.bootstrap/etc"/>
	  </path>

	
	<taskdef resource="org/apache/ivy/ant/antlib.xml"
	         uri="antlib:org.apache.ivy.ant" classpathref="apache.ivy.path"/>
	
	<!-- load all antxtra libs taskdefs -->
	    <taskdef uri="jwaresoftware.antxtras"
	         resource="org/jwaresoftware/antxtras/install/antlib-advanced.xml"
	         classpathref="ourjware.path"
	         loaderref="jware.classloader"/>
	    
	    <taskdef uri="jwaresoftware.log4ant"
	         resource="org/jwaresoftware/log4ant/install/antlib.xml"
	         loaderref="jware.classloader"/>
	    
	    <!-- Wraps errors up to output and my logback.xml is set to 
	         use mdc to print out the target and task during ticks so 
	         we use less ant macros to wrap the tasks inside targets -->
	    <presetdef name="wrap">
	       <oja:protect>
	          <oja:iferror capturethrown="last.error">
	             <emit:show messageid="E.something.failed" level="error">
	                <include thrown="last.error"/>
	             </emit:show>
	             <oja:unassign reference="last.error"/>
	          </oja:iferror>
	       </oja:protect>
	    </presetdef>  
	 
	    
	
	<path id="our.android.jar.path">
	 <pathelement location="${javahome}/jre/lib/rt.jar"/>
		<pathelement location="${android.platform.jar}"/>
   </path>
	<path id="our.project.libs.path">
	       <fileset dir="${basedir}/libs" >
            <include name="*.jar"/>
    
             </fileset>

	</path>
	

	<target name="-init" description="-init">
	
		<oja:vendorinfo name="antxtras"/>
		<oja:show message="AntXtras: ${antxtras.build.label}"/>
		     
		<emit:libcheck/>
		<emit:show message="${log4ant.label}"/> 
	    <emit:show message="${slf4j.label}"/>
		<emit:show message="${slf4j-impl.label}"/>
	</target>
	
	
	
   <target name="-ivyprep" description="ivy prep">
   	<!-- keep it simple do a retrieve and cachepath it
   	     that avoids needless copying
   	     
   	     results is jars copied to lib folder
   	     from user.home/.ivy2 after a repo is checked
   	     with pattern [artifact].[revision].[ext]
   	     -->
   	<ivy:retrieve/>
   	<ivy:cachepath pathid="doclet.classpath" conf="doclet" />
   	
   	</target>
	
	<target name="-javadocs" description="javadocs">
		<wrap>
		<javadoc packagenames="*.*.*"
		           destdir="${basedir}/docs"
		           sourcepath="src${ps}gen"
			       classpathref="our.project.libs.path"
		           docletpathref="doclet.classpath"
		           bootclasspathref="our.android.jar.path"
		           >
			<!-- -werror sets all doclava warnings to errors 
			     and thus javadoc generation stops. 
			     -error number will turn one warning into 
			     an error and stop the javadoc generation
			     -warning number
			     -hide number 
			     turn one thing into a warning or 
			     hide the issue. -->
		      <doclet name="com.google.doclava.Doclava">
		        <param name="-stubs" value="bin/stubs" />
		      	<!-- embedding javadocs in website parameters-->
		      	<param name="-templatedir" value="${doclava.templatedir}"/>
		      	<param name="-htmldir" value="${doclava.htmldir}"/>
		      	<!--shows all including hidden-->
		      	<param name="-hidden"/>
		      	<!-- hdf parameters -->
		        <param name="-hdf"/> <param name="project.name"/> <param name="${ant.project.name}"/>
		        <!-- versioning -->
		      	<!--<param name="-since"/> <param name="doclava/previous.xml"/> <param name="v1" />
		      	        <param name="-apiversion" value="v2"/>-->
		        <!-- federation -->
		      	<!--<param name="-federate" /><param name="JDK"/>
		      	        <param name="http://download.oracle.com/javase/6/docs/api/index.html?"/>
		      	        <param name="-federationxml"/><param name="JDK"/>
		      	        <param name="http://doclava.googlecode.com/svn/static/api/openjdk-6.xml"/>-->
		        
		      </doclet>
		    </javadoc>
			</wrap>
	</target>
	
	<target name="-umlimages">
	
		<!-- generate uml images for the javadocs generated in 
		     the -javadocs task -->
		<wrap>
			<javadoc
			            source="1.6"
			            destdir="${basedir}/bin/tempydoc"
				        classpathref="our.project.libs.path"
				        bootclasspathref="our.android.jar.path"
				        docletpathref="doclet.classpath"
			            additionalparam="-breakiterator">
			            <packageset dir="src">
			                <include name="**"/>
			            </packageset>
			            <doclet
			                name="ydoc.doclets.YStandard"
			                path="${yuml.resources}${ps}${basedir}/bin/classes">
			                <param name="-author"/>
			                <param name="-generic"/>
			                <param name="-umlautogen"/>
			                
			                
			                <param name="-tag" value="y.precondition"/>
			                <param name="-tag" value="y.postcondition"/>
			                <param name="-tag" value="y.complexity"/>
			                <param name="-tag" value="param"/>
			                <param name="-tag" value="return"/>
			                <param name="-tag" value="see"/>
			                <param name="-tag" value="y.uml"/>
			            </doclet>
			        </javadoc>
		</wrap>
		
	</target>


    <!-- ================================= 
          target: default              
         ================================= -->
    <target name="default" depends="-init, -ivyprep, -javadocs, -umlimages" description="javadocs gen build script">
        
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: depends                      
         - - - - - - - - - - - - - - - - - -->
    <target name="depends">
    </target>

</project>
