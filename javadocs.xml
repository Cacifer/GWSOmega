<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     Apr 17, 2013 4:32:08 AM                                                        

     GWSOmega    
     javadocs gen build script
     
     Look folks I run this inside an IDE, do not try this 
     outside of an IDE..please
                   
     fredgrott                                                                
     ====================================================================== -->
<project name="GWSOmega" default="default"
	xmlns:oja="jwaresoftware.antxtras" 
	xmlns:emit="jwaresoftware.log4ant"
	xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
            javadocs gen build script
    </description>
	
	<property environment="env"/>
	<tstamp/>
	<property file="project.properties"/>
	<property file="local.properties"/>
	<property name="build.config.dir" location="${basedir}/build.config"/>
	<property name="ant.task.jars.dir" location="${build.config.dir}/ant"/>
	<property name="ant,task.bootstrap.jar.dir" location="${build.config.dir}/ant.bootstrap"/>
	<property name="doclets.jars.dir" location="${build.config.dir}/doclets/doclets.jars"/>
	<property name="doclava.config.dir" location="${build.config.dir}/doclets/doclava.config"/>
	<mkdir dir="${basedir}/docs/getit"/>
	<mkdir dir="${basedir}/lib"/>
	<property name="doclava.templatedir" location="${doclava.config.dir}/assets/templates"/>
	<property name="doclava.htmldir" location="${doclava.config.dir}/htmldir"/>
	<property name="android.platorm.jar" location="${sdk.dir}/platforms/${target}/android.jar"/>
	
	<path id="apache.ivy.path">
         <fileset dir="${ant,task.bootstrap.jar.dir}" >
            <include name="ivy-2.3.0.jar"/>
         </fileset>
    </path>
	<!-- Location of Log4Ant antlib and thirdparty files,
	         note in log4ant example they missuse dirname poiting to 
	         dir with file which will not produce the expected result -->
	      <path id="ourjware.path">
	            <fileset dir="${build.config.dir}/ant.bootstrap/dep">
	                <include name="*/lib/*.jar"/>
	            </fileset>
	        <fileset dir="${build.config.dir}/ant.bootstrap">
	             <include name="jw-log4ant.jar"/>
	            <include name="logback-access-1.0.9.jar"/>
	            <include name="logback-core-1.0.9.jar"/>
	            <include name="logback-classic-1.0.9.jar"/>
	         </fileset>
	    <pathelement 
	      location="${build.config.dir}/ant.bootstrap/etc"/>
	  </path>

	
	<taskdef resource="org/apache/ivy/ant/antlib.xml"
	         uri="antlib:org.apache.ivy.ant" classpathref="apache.ivy.path"/>
	
	<!-- load all antxtra libs taskdefs -->
	    <taskdef uri="jwaresoftware.antxtras"
	         resource="org/jwaresoftware/antxtras/install/antlib-advanced.xml"
	         classpathref="ourjware.path"
	         loaderref="jware.classloader"/>
	    
	    <taskdef uri="jwaresoftware.log4ant"
	         resource="org/jwaresoftware/log4ant/install/antlib.xml"
	         loaderref="jware.classloader"/>
	    
	    <!-- Wraps errors up to output and my logback.xml is set to 
	         use mdc to print out the target and task during ticks so 
	         we use less ant macros to wrap the tasks inside targets -->
	    <presetdef name="wrap">
	       <oja:protect>
	          <oja:iferror capturethrown="last.error">
	             <emit:show messageid="E.something.failed" level="error">
	                <include thrown="last.error"/>
	             </emit:show>
	             <oja:unassign reference="last.error"/>
	          </oja:iferror>
	       </oja:protect>
	    </presetdef>  
	 
	    
	
	<path id="our.android.jar.path">
	 <pathelement location="${javahome}/jre/lib/rt.jar"/>
		<pathelement location="${android.platorm.jar}"/>
   </path>
	<path id="our.project.libs.path">
	       <fileset dir="${basedir}/libs" >
            <include name="*.jar"/>
    
             </fileset>

	</path>
	

	<target name="-init" description="-init">
	
		<oja:vendorinfo name="antxtras"/>
		<oja:show message="AntXtras: ${antxtras.build.label}"/>
		     
		<emit:libcheck/>
		<emit:show message="${log4ant.label}"/> 
	    <emit:show message="${slf4j.label}"/>
		<emit:show message="${slf4j-impl.label}"/>
	</target>
	
	
	
   <target name="-ivyprep" description="ivy prep">
   	<!-- Easiest way to set this up is to organize by 
   	     confs for the ant paths. That means you do a 
   	     little more work in organizing the ivy confs 
   	     when setting up the ivy repo but it reduces 
   	     a lot of work. 
   	     
   	     globmapper is used to map specific jars to specific
   	     jar filesot simplify soem jarlocations.
   	     -->
   	<ivy:resolve file="${basedir}/ivy.xml"/>
   	   <ivy:retrieve pattern="${basedir}/lib/[conf]/[artifact].[ext]">
   	   <globmapper from="${basedir}/lib/doclet/gwsdroidlava-*.jar" 
   	   	to="${basedir}/lib/doclet/gwsdroidlava.jar" />
   	  </ivy:retrieve>
   	<ivy:cachepath pathid="doclet.classpath" conf="doclet" />
   	<property name="doclava.jar" location="${basedir}/lib/doclet/gwsdroidlava.jar"/>
   	</target>
	
	<target name="-javadocs" description="javadocs">
		<wrap>
		<javadoc packagenames="*.*.*"
		           destdir="${basedir}/docs"
		           sourcepath="src:gen"
			       classpathref="our.project.libs.path"
		           docletpath="${doclava.jar}"
		           bootclasspathref="our.android.jar.path"
		           >
		      <doclet name="com.google.doclava.Doclava">
		        <param name="-stubs" value="bin/stubs" />
		      	<!-- embedding javadocs in website parameters-->
		      	<param name="-templatedir" value="${doclava.templatedir}"/>
		      	<param name="-htmldir" value="${doclava.htmldir}"/>
		      	<!--shows all including hidden-->
		      	<param name="-hidden"/>
		      	<!-- hdf parameters -->
		        <param name="-hdf"/> <param name="project.name"/> <param name="${ant.project.name}"/>
		        <!-- versioning -->
		        
		        <!-- federation -->
		        
		        
		      </doclet>
		    </javadoc>
			</wrap>
	</target>


    <!-- ================================= 
          target: default              
         ================================= -->
    <target name="default" depends="-init, -ivyprep, -javadocs" description="javadocs gen build script">
        
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: depends                      
         - - - - - - - - - - - - - - - - - -->
    <target name="depends">
    </target>

</project>
